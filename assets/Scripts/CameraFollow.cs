using UnityEngine;

/// <summary>
/// –°–∏—Å—Ç–µ–º–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã –∑–∞ –∏–≥—Ä–æ–∫–æ–º –¥–ª—è top-down 2D –∏–≥—Ä—ã.
/// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é.
/// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –æ—Å—è–º –∏ –∑–æ–Ω—ã –º—ë—Ä—Ç–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.
/// </summary>
public class CameraFollow : MonoBehaviour
{
    [Header("üéØ –¶–µ–ª—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")]
    [Tooltip("–ò–≥—Ä–æ–∫ –∏–ª–∏ –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º —Å–ª–µ–¥—É–µ—Ç –∫–∞–º–µ—Ä–∞")]
    [SerializeField] private Transform target;

    [Header("‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è")]
    [Tooltip("–°–∫–æ—Ä–æ—Å—Ç—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã (0.1 = –º–µ–¥–ª–µ–Ω–Ω–æ, 1.0 = –º–≥–Ω–æ–≤–µ–Ω–Ω–æ)")]
    [Range(0.01f, 1f)]
    [SerializeField] private float followSpeed = 0.125f;

    [Tooltip("–°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏–≥—Ä–æ–∫–∞")]
    [SerializeField] private Vector3 offset = new Vector3(0, 0, -10);

    [Header("üö´ –ó–æ–Ω–∞ –º—ë—Ä—Ç–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞")]
    [Tooltip("–í–∫–ª—é—á–∏—Ç—å –∑–æ–Ω—É –º—ë—Ä—Ç–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ (–∫–∞–º–µ—Ä–∞ –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è, –ø–æ–∫–∞ –∏–≥—Ä–æ–∫ –≤ –∑–æ–Ω–µ)")]
    [SerializeField] private bool useDeadZone = false;

    [Tooltip("–†–∞–∑–º–µ—Ä –∑–æ–Ω—ã –º—ë—Ä—Ç–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞")]
    [SerializeField] private Vector2 deadZoneSize = new Vector2(1f, 1f);

    [Header("üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è")]
    [Tooltip("–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º —É—Ä–æ–≤–Ω—è")]
    [SerializeField] private bool useBounds = false;

    [Tooltip("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–º–µ—Ä—ã")]
    [SerializeField] private Vector2 minBounds = new Vector2(-10, -10);

    [Tooltip("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞–º–µ—Ä—ã")]
    [SerializeField] private Vector2 maxBounds = new Vector2(10, 10);

    [Header("üîß –û—Ç–ª–∞–¥–∫–∞")]
    [SerializeField] private bool enableDebugLogs = false;
    [SerializeField] private bool showGizmos = true;

    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    private Camera cam;
    private Vector3 velocity = Vector3.zero;
    private Vector3 lastTargetPosition;

    void Start()
    {
        InitializeCamera();
        FindPlayerIfNeeded();
    }

    void LateUpdate()
    {
        if (target != null)
        {
            FollowTarget();
        }
        else if (enableDebugLogs)
        {
            Debug.LogWarning("CameraFollow: –¶–µ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞! –ö–∞–º–µ—Ä–∞ –Ω–µ –±—É–¥–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å.");
        }
    }

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞–º–µ—Ä—ã
    /// </summary>
    private void InitializeCamera()
    {
        cam = GetComponent<Camera>();
        if (cam == null)
        {
            Debug.LogError("CameraFollow: –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –æ–±—ä–µ–∫—Ç–µ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º Camera!");
        }

        if (enableDebugLogs)
        {
            Debug.Log("CameraFollow: –ö–∞–º–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
        }
    }

    /// <summary>
    /// –ò—â–µ—Ç –∏–≥—Ä–æ–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ —Ü–µ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
    /// </summary>
    private void FindPlayerIfNeeded()
    {
        if (target == null)
        {
            GameObject player = GameObject.FindGameObjectWithTag("Player");
            if (player != null)
            {
                target = player.transform;
                if (enableDebugLogs)
                {
                    Debug.Log($"CameraFollow: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫: {player.name}");
                }
            }
            else
            {
                Debug.LogWarning("CameraFollow: –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å —Ç–µ–≥ 'Player' –∏–ª–∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ —Ü–µ–ª—å –≤—Ä—É—á–Ω—É—é.");
            }
        }
    }

    /// <summary>
    /// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ —Ü–µ–ª—å—é
    /// </summary>
    private void FollowTarget()
    {
        Vector3 targetPosition = target.position + offset;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—É –º—ë—Ä—Ç–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        if (useDeadZone && IsInDeadZone(target.position))
        {
            return; // –ù–µ –¥–≤–∏–≥–∞–µ–º –∫–∞–º–µ—Ä—É, –µ—Å–ª–∏ —Ü–µ–ª—å –≤ –º—ë—Ä—Ç–≤–æ–π –∑–æ–Ω–µ
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –∂–µ–ª–∞–µ–º—É—é –ø–æ–∑–∏—Ü–∏—é
        Vector3 desiredPosition = targetPosition;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º
        if (useBounds)
        {
            desiredPosition = ApplyBounds(desiredPosition);
        }

        // –ü–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞–º–µ—Ä—É
        Vector3 smoothedPosition = Vector3.Lerp(transform.position, desiredPosition, followSpeed);
        transform.position = smoothedPosition;

        // –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (enableDebugLogs && Vector3.Distance(lastTargetPosition, target.position) > 0.1f)
        {
            Debug.Log($"CameraFollow: –°–ª–µ–¥—É—é –∑–∞ —Ü–µ–ª—å—é. –ü–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã: {transform.position}");
            lastTargetPosition = target.position;
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ü–µ–ª—å –≤ –∑–æ–Ω–µ –º—ë—Ä—Ç–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    /// </summary>
    private bool IsInDeadZone(Vector3 targetPos)
    {
        Vector3 cameraPos = transform.position;
        Vector3 difference = targetPos - cameraPos;

        return Mathf.Abs(difference.x) <= deadZoneSize.x / 2f && 
               Mathf.Abs(difference.y) <= deadZoneSize.y / 2f;
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º —É—Ä–æ–≤–Ω—è
    /// </summary>
    private Vector3 ApplyBounds(Vector3 desiredPosition)
    {
        float clampedX = Mathf.Clamp(desiredPosition.x, minBounds.x, maxBounds.x);
        float clampedY = Mathf.Clamp(desiredPosition.y, minBounds.y, maxBounds.y);

        return new Vector3(clampedX, clampedY, desiredPosition.z);
    }

    #region –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º

    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ü–µ–ª—å –¥–ª—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    /// </summary>
    public void SetTarget(Transform newTarget)
    {
        target = newTarget;
        
        if (enableDebugLogs)
        {
            Debug.Log($"CameraFollow: –ù–æ–≤–∞—è —Ü–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {(newTarget != null ? newTarget.name : "null")}");
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å
    /// </summary>
    public Transform GetTarget()
    {
        return target;
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    /// </summary>
    public void SetFollowSpeed(float newSpeed)
    {
        followSpeed = Mathf.Clamp01(newSpeed);
        
        if (enableDebugLogs)
        {
            Debug.Log($"CameraFollow: –°–∫–æ—Ä–æ—Å—Ç—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {followSpeed}");
        }
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
    /// </summary>
    public void SetOffset(Vector3 newOffset)
    {
        offset = newOffset;
        
        if (enableDebugLogs)
        {
            Debug.Log($"CameraFollow: –°–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {offset}");
        }
    }

    /// <summary>
    /// –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∫–∞–º–µ—Ä—É –∫ —Ü–µ–ª–∏ (–±–µ–∑ –ø–ª–∞–≤–Ω–æ—Å—Ç–∏)
    /// </summary>
    public void SnapToTarget()
    {
        if (target != null)
        {
            Vector3 targetPosition = target.position + offset;
            
            if (useBounds)
            {
                targetPosition = ApplyBounds(targetPosition);
            }
            
            transform.position = targetPosition;
            
            if (enableDebugLogs)
            {
                Debug.Log("CameraFollow: –ö–∞–º–µ—Ä–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –∫ —Ü–µ–ª–∏");
            }
        }
    }

    /// <summary>
    /// –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü
    /// </summary>
    public void SetUseBounds(bool use, Vector2 min, Vector2 max)
    {
        useBounds = use;
        minBounds = min;
        maxBounds = max;
        
        if (enableDebugLogs)
        {
            Debug.Log($"CameraFollow: –ì—Ä–∞–Ω–∏—Ü—ã {(use ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–≤—ã–∫–ª—é—á–µ–Ω—ã")}. Min: {min}, Max: {max}");
        }
    }

    /// <summary>
    /// –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –∑–æ–Ω—É –º—ë—Ä—Ç–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    /// </summary>
    public void SetDeadZone(bool use, Vector2 size)
    {
        useDeadZone = use;
        deadZoneSize = size;
        
        if (enableDebugLogs)
        {
            Debug.Log($"CameraFollow: –ú—ë—Ä—Ç–≤–∞—è –∑–æ–Ω–∞ {(use ? "–≤–∫–ª—é—á–µ–Ω–∞" : "–≤—ã–∫–ª—é—á–µ–Ω–∞")}. –†–∞–∑–º–µ—Ä: {size}");
        }
    }

    #endregion

    #region –û—Ç–ª–∞–¥–∫–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ

    void OnDrawGizmosSelected()
    {
        if (!showGizmos) return;

        // –†–∏—Å—É–µ–º –∑–æ–Ω—É –º—ë—Ä—Ç–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
        if (useDeadZone)
        {
            Gizmos.color = Color.yellow;
            Gizmos.DrawWireCube(transform.position, new Vector3(deadZoneSize.x, deadZoneSize.y, 0));
            
            Gizmos.color = new Color(1, 1, 0, 0.1f);
            Gizmos.DrawCube(transform.position, new Vector3(deadZoneSize.x, deadZoneSize.y, 0));
        }

        // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —É—Ä–æ–≤–Ω—è
        if (useBounds)
        {
            Gizmos.color = Color.red;
            Vector3 center = new Vector3((minBounds.x + maxBounds.x) / 2f, (minBounds.y + maxBounds.y) / 2f, 0);
            Vector3 size = new Vector3(maxBounds.x - minBounds.x, maxBounds.y - minBounds.y, 0);
            Gizmos.DrawWireCube(center, size);
        }

        // –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –∫ —Ü–µ–ª–∏
        if (target != null)
        {
            Gizmos.color = Color.green;
            Gizmos.DrawLine(transform.position, target.position);
            
            // –†–∏—Å—É–µ–º –ø–æ–∑–∏—Ü–∏—é —Ü–µ–ª–∏ —Å —É—á—ë—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è
            Vector3 targetWithOffset = target.position + offset;
            Gizmos.color = Color.blue;
            Gizmos.DrawWireSphere(targetWithOffset, 0.5f);
        }
    }

    #endregion
} 