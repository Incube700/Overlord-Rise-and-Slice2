using UnityEngine;
using UnityEngine.Tilemaps;

/// <summary>
/// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–ª–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω–µ–π.
/// –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ç–∞–π–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –∏–≥—Ä–µ, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
/// –ù–∞–∑–Ω–∞—á–∞–π—Ç–µ —Ç–∞–π–ª—ã —á–µ—Ä–µ–∑ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä Unity.
/// </summary>
public class TileDatabase : MonoBehaviour
{
    [Header("üü´ –¢–∞–π–ª—ã –ø–æ–ª–∞")]
    [Tooltip("–û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–ª –ø–æ–ª–∞ - –≤–∞—Ä–∏–∞–Ω—Ç 1")]
    public TileBase floorTile_1;
    
    [Tooltip("–û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–ª –ø–æ–ª–∞ - –≤–∞—Ä–∏–∞–Ω—Ç 2")]
    public TileBase floorTile_2;
    
    [Tooltip("–û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–ª –ø–æ–ª–∞ - –≤–∞—Ä–∏–∞–Ω—Ç 3")]
    public TileBase floorTile_3;

    [Header("üß± –¢–∞–π–ª—ã —Å—Ç–µ–Ω")]
    [Tooltip("–û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–ª —Å—Ç–µ–Ω—ã - –≤–∞—Ä–∏–∞–Ω—Ç 1")]
    public TileBase wallTile_1;
    
    [Tooltip("–û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–π–ª —Å—Ç–µ–Ω—ã - –≤–∞—Ä–∏–∞–Ω—Ç 2")]
    public TileBase wallTile_2;

    [Header("üåø –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–ª—ã")]
    [Tooltip("–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - –≤–∞—Ä–∏–∞–Ω—Ç 1 (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—Ä–∞–≤–∞)")]
    public TileBase decorTile_1;
    
    [Tooltip("–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - –≤–∞—Ä–∏–∞–Ω—Ç 2 (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–º–Ω–∏)")]
    public TileBase decorTile_2;
    
    [Tooltip("–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç - –≤–∞—Ä–∏–∞–Ω—Ç 3 (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ü–≤–µ—Ç—ã)")]
    public TileBase decorTile_3;

    [Header("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    [SerializeField] private bool enableDebugLogs = true;

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∞–π–ª –ø–æ–ª–∞
    /// </summary>
    public TileBase GetRandomFloorTile()
    {
        TileBase[] floorTiles = { floorTile_1, floorTile_2, floorTile_3 };
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
        var validTiles = System.Array.FindAll(floorTiles, tile => tile != null);
        
        if (validTiles.Length == 0)
        {
            if (enableDebugLogs)
            {
                Debug.LogWarning("TileDatabase: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–π–ª–æ–≤ –ø–æ–ª–∞!");
            }
            return null;
        }
        
        return validTiles[Random.Range(0, validTiles.Length)];
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∞–π–ª —Å—Ç–µ–Ω—ã
    /// </summary>
    public TileBase GetRandomWallTile()
    {
        TileBase[] wallTiles = { wallTile_1, wallTile_2 };
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
        var validTiles = System.Array.FindAll(wallTiles, tile => tile != null);
        
        if (validTiles.Length == 0)
        {
            if (enableDebugLogs)
            {
                Debug.LogWarning("TileDatabase: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–π–ª–æ–≤ —Å—Ç–µ–Ω!");
            }
            return null;
        }
        
        return validTiles[Random.Range(0, validTiles.Length)];
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–∞–π–ª
    /// </summary>
    public TileBase GetRandomDecorTile()
    {
        TileBase[] decorTiles = { decorTile_1, decorTile_2, decorTile_3 };
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è
        var validTiles = System.Array.FindAll(decorTiles, tile => tile != null);
        
        if (validTiles.Length == 0)
        {
            if (enableDebugLogs)
            {
                Debug.LogWarning("TileDatabase: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–ª–æ–≤!");
            }
            return null;
        }
        
        return validTiles[Random.Range(0, validTiles.Length)];
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–π–ª –ø–æ–ª–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É (1-3)
    /// </summary>
    public TileBase GetFloorTile(int index)
    {
        switch (index)
        {
            case 1: return floorTile_1;
            case 2: return floorTile_2;
            case 3: return floorTile_3;
            default:
                if (enableDebugLogs)
                {
                    Debug.LogWarning($"TileDatabase: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–∞–π–ª–∞ –ø–æ–ª–∞: {index}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1-3.");
                }
                return floorTile_1;
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–π–ª —Å—Ç–µ–Ω—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É (1-2)
    /// </summary>
    public TileBase GetWallTile(int index)
    {
        switch (index)
        {
            case 1: return wallTile_1;
            case 2: return wallTile_2;
            default:
                if (enableDebugLogs)
                {
                    Debug.LogWarning($"TileDatabase: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç–∞–π–ª–∞ —Å—Ç–µ–Ω—ã: {index}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1-2.");
                }
                return wallTile_1;
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–∞–π–ª –ø–æ –∏–Ω–¥–µ–∫—Å—É (1-3)
    /// </summary>
    public TileBase GetDecorTile(int index)
    {
        switch (index)
        {
            case 1: return decorTile_1;
            case 2: return decorTile_2;
            case 3: return decorTile_3;
            default:
                if (enableDebugLogs)
                {
                    Debug.LogWarning($"TileDatabase: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–ª–∞: {index}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1-3.");
                }
                return decorTile_1;
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–π–ª—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã
    /// </summary>
    public bool ValidateDatabase()
    {
        bool isValid = true;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–ª—ã –ø–æ–ª–∞
        if (floorTile_1 == null && floorTile_2 == null && floorTile_3 == null)
        {
            Debug.LogError("TileDatabase: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∏ –æ–¥–∏–Ω —Ç–∞–π–ª –ø–æ–ª–∞!");
            isValid = false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–ª—ã —Å—Ç–µ–Ω
        if (wallTile_1 == null && wallTile_2 == null)
        {
            Debug.LogError("TileDatabase: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∏ –æ–¥–∏–Ω —Ç–∞–π–ª —Å—Ç–µ–Ω—ã!");
            isValid = false;
        }
        
        // –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–ª—ã –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º
        if (decorTile_1 == null && decorTile_2 == null && decorTile_3 == null)
        {
            if (enableDebugLogs)
            {
                Debug.LogWarning("TileDatabase: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∏ –æ–¥–∏–Ω –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ç–∞–π–ª. –î–µ–∫–æ—Ä –Ω–µ –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.");
            }
        }
        
        if (isValid && enableDebugLogs)
        {
            Debug.Log("TileDatabase: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–π–ª–æ–≤ –≤–∞–ª–∏–¥–Ω–∞!");
        }
        
        return isValid;
    }

    void Start()
    {
        ValidateDatabase();
    }
} 